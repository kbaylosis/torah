{
  //   ╔═╗╔═╗╦  ╦╔╗╔╔╦╗┬─┐┌─┐
  //   ║╣ ╚═╗║  ║║║║ ║ ├┬┘│
  //  o╚═╝╚═╝╩═╝╩╝╚╝ ╩ ┴└─└─┘
  // A set of basic code conventions designed to complement the .jshintrc file
  // and encourage quality and consistency across your code base.  By default,
  // these rules are checked against automatically any time you run `npm test`.
  //
  // > An additional eslintrc override file is included in the `assets/` folder
  // > right out of the box.  This is specifically to allow for variations in acceptable
  // > global variables between front-end JavaScript code designed to run in the browser
  // > vs. backend code designed to run in a Node.js/Sails process.
  //
  // > Note: If you're using mocha, you'll want to add an extra override file to your
  // > `test/` folder so that eslint will tolerate mocha-specific globals like `before`
  // > and `describe`.
  //
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // For more information about any of the rules below, check out the relevant
  // reference page on eslint.org.  For example, to get details on "no-sequences",
  // you would visit `http://eslint.org/docs/rules/no-sequences`.
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  "parser": "babel-eslint",

  "env": {
    "node": true
  },

  "globals": {
    // If "no-undef" is enabled below and your app uses globals, be sure to list all
    // relevant globals below (including the globalIds of models, if relevant):
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // "sails": true,
    // "_": true,
    // "async": true,
    // ...and any other backend globals (e.g. `"User": true`)
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  },

  "rules": {
    "callback-return":              [2, ["callback", "cb", "next", "done", "proceed"]],
    "eqeqeq":                       [2, "always"],
    "handle-callback-err":          [2],
    "no-return-assign":             [2, "always"],
    "no-sequences":                 [2],
    "no-undef":                     [0],
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // ^^Note: If this "no-undef" rule is enabled (set to `[2]`), then model globals
    // (e.g. `"User": true`) should also be included above under "globals".
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    "no-unexpected-multiline":      [1],
    "no-unused-vars":               [1],
    "one-var":                      [2, "never"],

    // Best Practices
    "curly": "error",

    // Node.js and Common.js
    "global-require": "error",

    // Stylistic Issues
    "block-spacing": "error",
    "brace-style": "error",
    "camelcase": "error",
    "comma-spacing": ["error", { "before": false, "after": true }],
    "comma-style": ["error", "last"],
    "comma-dangle": ["error", "always-multiline"],
    "consistent-this": ["error", "that"],
    "eol-last": ["error", "always"],
    "func-call-spacing": ["error", "never"],
    "keyword-spacing": ["error", { "after": true }],
    "indent": ["error", "tab"],
    "line-comment-position": ["error", { "position": "above" }],
    "linebreak-style": ["error", "unix"],
    "max-depth": ["error", 4],
    "max-len": ["error", 100, 2],
    "max-statements": ["error", 50],
    "max-statements-per-line": ["error", { "max": 1 }],
    "new-cap": ["error", { "newIsCap": true }],
    "new-parens": "error",
    "newline-after-var": ["error", "always"],
    "newline-before-return": "error",
    "no-inline-comments": "error",
    "no-lonely-if": "error",
    "no-mixed-operators": "error",
    "no-mixed-spaces-and-tabs": "error",
    "no-multiple-empty-lines": ["error", { "max": 2, "maxEOF": 1 }],
    "no-negated-condition": "error",
    "no-nested-ternary": "error",
    "no-new-object": "error",
    "no-trailing-spaces": ["error", { "skipBlankLines": true }],
    "no-unneeded-ternary": "error",
    "no-whitespace-before-property": "error",
    "operator-assignment": ["error", "always"],
    "operator-linebreak": ["error", "after"],
    "quote-props": ["error", "as-needed"],
    "quotes": ["error", "double"],
    "semi": ["error", "always"],
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": ["error", "always"],

    // ES6
    "arrow-parens": ["error", "always"],
    "arrow-spacing": "error",
    "constructor-super": "error",
    "no-const-assign": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": "error",
    "no-new-symbol": "error",
    "no-this-before-super": "error",
    "no-useless-computed-key": "error",
    "no-useless-constructor": "error",
    "no-useless-rename": "error",
    "no-var": "error",
    "object-shorthand": "error",
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-destructuring": ["error", {
      "array": false,
      "object": true
    }, {
      "enforceForRenamedProperties": false
    }],
    "prefer-numeric-literals": "error",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "require-yield": "error",
    "rest-spread-spacing": ["error", "never"],
    "symbol-description": "error",
    "yield-star-spacing": ["error", "after"]
  }

}
